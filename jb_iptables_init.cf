#######################################################
# Iptables
#######################################################
# Scenario:
# Secure the system with iptable firewall
# 
# Original author: CFEngine
# Adapted by: Jurica Borozan
# Version: 1.1.0
#

##
## When testing uncoment
##
#body common control
#{
#  any::
#    bundlesequence => { "jb_iptables_init_globals", "jb_iptables_init" };
#  cfengine_3_4::
#    inputs => { "$(sys.workdir)/inputs/libraries/cfengine_stdlib.cf" };
#  cfengine_3_5::
#    inputs => { "$(sys.workdir)/inputs/libraries/cfengine_stdlib.cf" };
#  cfengine_3_5::
#    inputs => { "$(sys.workdir)/inputs/lib/3.5/paths.cf", "$(sys.workdir)/inputs/lib/3.5/common.cf", "$(sys.workdir)/inputs/lib/3.5/commands.cf", "$(sys.workdir)/inputs/lib/3.5/packages.cf", "$(sys.workdir)/inputs/lib/3.5/files.cf", "$(sys.workdir)/inputs/lib/3.5/services.cf", "$(sys.workdir)/inputs/lib/3.5/processes.cf", "$(sys.workdir)/inputs/lib/3.5/storage.cf", "$(sys.workdir)/inputs/lib/3.5/databases.cf", "$(sys.workdir)/inputs/lib/3.5/monitor.cf", "$(sys.workdir)/inputs/lib/3.5/guest_environments.cf", "$(sys.workdir)/inputs/lib/3.5/bundles.cf", "$(sys.workdir)/inputs/lib/3.5/reports.cf", "$(sys.workdir)/inputs/lib/3.5/cfe_internal.cf" };
#  !(cfengine_3_4|cfengine_3_5)::
#    inputs => { "$(sys.libdir)/stdlib.cf" };
#}

##
##
##
bundle common jb_iptables_init_globals
{
  meta:
    "tags" slist => { "autorun" };

  classes:

    linux::

# check service restart method
      "have_systemctl"        expression => fileexists("/usr/bin/systemctl");
      "have_init_d_iptables"  expression => fileexists("/etc/init.d/iptables");
      "have_iptables_restore" expression => fileexists("/sbin/iptables-restore");
}

##
##
##
bundle agent jb_iptables_init
{
  meta:
    "tags" slist => { "autorun" };

  vars:

    centos|redhat::

      "iptables_file" string => "/etc/sysconfig/iptables";

    ubuntu|debian::

      "iptables_file" string => "/etc/iptables/rules.v4";

    linux::

# services ports to open, ssh and cfengine are open per default
#      "params[httpd][dport]"    slist => {
#                                           "80",
#                                           "443"
#                                         };
#      "params[nginx][dport]"    slist => {
#                                           "8080",
#                                           "8443"
#                                         };

      "params[glusterfs][dport]" slist => {
                                            "24007:24008",
#                                            "38465:38469", # Gluster NFS
                                            "49152:49156"  # 49152:49664 # 512 ports for bricks
                                          };


  files:

    linux::

      "$(iptables_file)"
              comment => "Create iptables rule cache file $(iptables_file)",
               create => "true",
        edit_defaults => empty,
            edit_line => jb_iptables_init_restore_iptables("jb_iptables_init.params"),
              classes => if_repaired("restart_iptables");


# check if it is running

  commands:

    (redhat|centos).restart_iptables.have_systemctl::

      "/usr/bin/systemctl restart iptables"
        comment => "Restart iptables for a new policy";

    (redhat|centos).restart_iptables.!have_init_d_iptables.have_init_d_iptables::

      "/usr/sbin/service iptables restart"
        comment => "Restart iptables for a new policy";

     (ubuntu|debian).restart_iptables.have_iptables_restore::

       "/sbin/iptables-restore < $(iptables_file)"
         comment => "Restart iptables for a new policy";
      
}

##
##
##
bundle edit_line jb_iptables_init_restore_iptables(params)
{
  vars:

    "services" slist => getindices("$(params)");

# workaround because it will not work with slist from $(params)[$(services)][dport] directly on 3.7.1
    "dport_$(services)" slist => maplist("$(this)", "@($(params)[$(services)][dport])");

  insert_lines:
    "$(jb_def.cfe_created_file)

# Turn on traffic filtering
*filter

# Set default policies
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]

# Accept all traffic from the loopback interface.
-A INPUT -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT

# block null packets
-A INPUT -p tcp --tcp-flags ALL NONE -j DROP

# reject a syn-flood attack
-A INPUT -p tcp ! --syn -m state --state NEW -j DROP

# reject XMAS packets
-A INPUT -p tcp --tcp-flags ALL ALL -j DROP

# Accept legitimate responses to traffic we generate.
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A OUTPUT -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

# Allow incoming/outgoing TCP port 5308 (cfengine) traffic
-A INPUT -i eth0 -p tcp -s $(sys.policy_hub)/24 --dport 5308 -m state --state NEW -j ACCEPT
-A OUTPUT -o eth0 -p tcp -d $(sys.policy_hub)/24 --dport 5308 -m state --state NEW -j ACCEPT

# Allow incoming/outgoing TCP port 22 (ssh) traffic
-A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW -j ACCEPT
-A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW -j ACCEPT
"
      insert_type => "preserve_block";

# service inserts
    "# Allow incoming TCP port for $(services)
-A INPUT -m state --state NEW -p tcp --dport $(dport_$(services)) -j ACCEPT
" 
      insert_type => "preserve_block";

    "
# Forward all legitimate responses to forwarded traffic.
-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT

# reject icmp
-A INPUT -j REJECT --reject-with icmp-host-prohibited 
-A FORWARD -j REJECT --reject-with icmp-host-prohibited 

# Make it all true.
COMMIT"
      insert_type => "preserve_block";

}
